
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_USBMassStorageClass.h:

Program Listing for File USBMassStorageClass.h
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_USBMassStorageClass.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/drivers/USBMassStorageClass.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
                LUFA Library
        Copyright (C) Dean Camera, 2017.
   
     dean [at] fourwalledcubicle [dot] com
              www.lufa-lib.org
   */
   
   /*
     Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
   
     Permission to use, copy, modify, distribute, and sell this
     software and its documentation for any purpose is hereby granted
     without fee, provided that the above copyright notice appear in
     all copies and that both that the copyright notice and this
     permission notice and warranty disclaimer appear in supporting
     documentation, and that the name of the author not be used in
     advertising or publicity pertaining to distribution of the
     software without specific, written prior permission.
   
     The author disclaims all warranties with regard to this
     software, including all implied warranties of merchantability
     and fitness.  In no event shall the author be liable for any
     special, indirect or consequential damages or any damages
     whatsoever resulting from loss of use, data or profits, whether
     in an action of contract, negligence or other tortious action,
     arising out of or in connection with the use or performance of
     this software.
   */
   
   #ifndef _MS_CLASS_COMMON_H_
   #define _MS_CLASS_COMMON_H_
   
   #define ATTR_PACKED __attribute__((packed))
   
       /* Includes: */
   
       /* Enable C linkage for C++ Compilers: */
           #if defined(__cplusplus)
               extern "C" {
           #endif
   
       /* Macros: */
           #define MS_CBW_SIGNATURE                               0x43425355UL
   
           #define MS_CSW_SIGNATURE                               0x53425355UL
   
           #define MS_COMMAND_DIR_DATA_OUT                        (0 << 7)
   
           #define MS_COMMAND_DIR_DATA_IN                         (1 << 7)
   
           #define SCSI_CMD_INQUIRY                               0x12
   
           #define SCSI_CMD_REQUEST_SENSE                         0x03
   
           #define SCSI_CMD_TEST_UNIT_READY                       0x00
   
           #define SCSI_CMD_READ_CAPACITY_10                      0x25
   
           #define SCSI_CMD_START_STOP_UNIT                       0x1B
   
           #define SCSI_CMD_SEND_DIAGNOSTIC                       0x1D
   
           #define SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL          0x1E
   
           #define SCSI_CMD_WRITE_10                              0x2A
   
           #define SCSI_CMD_READ_10                               0x28
   
           #define SCSI_CMD_WRITE_6                               0x0A
   
           #define SCSI_CMD_READ_6                                0x08
   
           #define SCSI_CMD_VERIFY_10                             0x2F
   
           #define SCSI_CMD_MODE_SENSE_6                          0x1A
   
           #define SCSI_CMD_MODE_SENSE_10                         0x5A
   
           #define SCSI_CMD_READ_FORMAT_CAPACITY                  0x23
   
           #define SCSI_SENSE_KEY_GOOD                            0x00
   
           #define SCSI_SENSE_KEY_RECOVERED_ERROR                 0x01
   
           #define SCSI_SENSE_KEY_NOT_READY                       0x02
   
           #define SCSI_SENSE_KEY_MEDIUM_ERROR                    0x03
   
           #define SCSI_SENSE_KEY_HARDWARE_ERROR                  0x04
   
           #define SCSI_SENSE_KEY_ILLEGAL_REQUEST                 0x05
   
           #define SCSI_SENSE_KEY_UNIT_ATTENTION                  0x06
   
           #define SCSI_SENSE_KEY_DATA_PROTECT                    0x07
   
           #define SCSI_SENSE_KEY_BLANK_CHECK                     0x08
   
           #define SCSI_SENSE_KEY_VENDOR_SPECIFIC                 0x09
   
           #define SCSI_SENSE_KEY_COPY_ABORTED                    0x0A
   
           #define SCSI_SENSE_KEY_ABORTED_COMMAND                 0x0B
   
           #define SCSI_SENSE_KEY_VOLUME_OVERFLOW                 0x0D
   
           #define SCSI_SENSE_KEY_MISCOMPARE                      0x0E
   
           #define SCSI_ASENSE_NO_ADDITIONAL_INFORMATION          0x00
   
           #define SCSI_ASENSE_LOGICAL_UNIT_NOT_READY             0x04
   
           #define SCSI_ASENSE_INVALID_FIELD_IN_CDB               0x24
   
           #define SCSI_ASENSE_NOT_READY_TO_READY_CHANGE          0x28
   
           #define SCSI_ASENSE_WRITE_PROTECTED                    0x27
   
           #define SCSI_ASENSE_FORMAT_ERROR                       0x31
   
           #define SCSI_ASENSE_INVALID_COMMAND                    0x20
   
           #define SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE 0x21
   
           #define SCSI_ASENSE_MEDIUM_NOT_PRESENT                 0x3A
   
           #define SCSI_ASENSEQ_NO_QUALIFIER                      0x00
   
           #define SCSI_ASENSEQ_FORMAT_COMMAND_FAILED             0x01
   
           #define SCSI_ASENSEQ_INITIALIZING_COMMAND_REQUIRED     0x02
   
           #define SCSI_ASENSEQ_OPERATION_IN_PROGRESS             0x07
   
       /* Enums: */
           enum MS_Descriptor_ClassSubclassProtocol_t
           {
               MS_CSCP_MassStorageClass          = 0x08, 
               MS_CSCP_SCSITransparentSubclass   = 0x06, 
               MS_CSCP_BulkOnlyTransportProtocol = 0x50, 
           };
   
           enum MS_ClassRequests_t
           {
               MS_REQ_GetMaxLUN                  = 0xFE, 
               MS_REQ_MassStorageReset           = 0xFF, 
           };
   
           enum MS_CommandStatusCodes_t
           {
               MS_SCSI_COMMAND_Pass              = 0, 
               MS_SCSI_COMMAND_Fail              = 1, 
               MS_SCSI_COMMAND_PhaseError        = 2, 
           };
   
       /* Type Defines: */
           typedef struct
           {
               uint32_t Signature; 
               uint32_t Tag; 
               uint32_t DataTransferLength; 
               uint8_t  Flags; 
               uint8_t  LUN; 
               uint8_t  SCSICommandLength; 
               uint8_t  SCSICommandData[16]; 
           } ATTR_PACKED MS_CommandBlockWrapper_t;
   
           typedef struct
           {
               uint32_t Signature; 
               uint32_t Tag; 
               uint32_t DataTransferResidue; 
               uint8_t  Status; 
           } ATTR_PACKED MS_CommandStatusWrapper_t;
   
           typedef struct
           {
               uint8_t  ResponseCode;
   
               uint8_t  SegmentNumber;
   
               unsigned SenseKey            : 4;
               unsigned Reserved            : 1;
               unsigned ILI                 : 1;
               unsigned EOM                 : 1;
               unsigned FileMark            : 1;
   
               uint8_t  Information[4];
               uint8_t  AdditionalLength;
               uint8_t  CmdSpecificInformation[4];
               uint8_t  AdditionalSenseCode;
               uint8_t  AdditionalSenseQualifier;
               uint8_t  FieldReplaceableUnitCode;
               uint8_t  SenseKeySpecific[3];
           } ATTR_PACKED SCSI_Request_Sense_Response_t;
   
           typedef struct
           {
               unsigned DeviceType          : 5;
               unsigned PeripheralQualifier : 3;
   
               unsigned Reserved            : 7;
               unsigned Removable           : 1;
   
               uint8_t  Version;
   
               unsigned ResponseDataFormat  : 4;
               unsigned Reserved2           : 1;
               unsigned NormACA             : 1;
               unsigned TrmTsk              : 1;
               unsigned AERC                : 1;
   
               uint8_t  AdditionalLength;
               uint8_t  Reserved3[2];
   
               unsigned SoftReset           : 1;
               unsigned CmdQue              : 1;
               unsigned Reserved4           : 1;
               unsigned Linked              : 1;
               unsigned Sync                : 1;
               unsigned WideBus16Bit        : 1;
               unsigned WideBus32Bit        : 1;
               unsigned RelAddr             : 1;
   
               uint8_t  VendorID[8];
               uint8_t  ProductID[16];
               uint8_t  RevisionID[4];
           } ATTR_PACKED SCSI_Inquiry_Response_t;
   
       /* Disable C linkage for C++ Compilers: */
           #if defined(__cplusplus)
               }
           #endif
   
   #endif
   
