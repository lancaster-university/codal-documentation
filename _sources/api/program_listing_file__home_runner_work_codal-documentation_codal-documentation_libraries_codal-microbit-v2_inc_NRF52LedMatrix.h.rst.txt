
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_NRF52LedMatrix.h:

Program Listing for File NRF52LedMatrix.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_NRF52LedMatrix.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/NRF52LedMatrix.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef NRF52_LED_MATRIX_H
   #define NRF52_LED_MATRIX_H
   
   #include "CodalConfig.h"
   #include "LEDMatrix.h"
   #include "NRFLowLevelTimer.h"
   
   #define NRF52_LED_MATRIX_CLOCK_FREQUENCY        16000000            // Frequency of underlying hardware clock (must b 1MHz, 2Mhz 4Mhz, 8Mhz or 16MHz)
   #define NRF52_LED_MATRIX_FREQUENCY              60                  // Frequency of the frame update for the display
   #define NRF52_LED_MATRIX_MAXIMUM_COLUMNS        5                   // The maximum number of LEDMatrix columns supported by the hardware.
   #define NRF52_LED_MATRIX_LIGHTSENSE_STROBES     4                   // Multiple of strobe period to use for light sense
   
   
   // TODO: Replace this with a resource allocated version
   #define NRF52_LEDMATRIX_GPIOTE_CHANNEL_BASE     1
   #define NRF52_LEDMATRIX_PPI_CHANNEL_BASE        3
   
   #define NRF52_LEDMATRIX_STATUS_RESET            0x01
   #define NRF52_LEDMATRIX_STATUS_LIGHTREADY       0x02
   
   namespace codal
   {
       class NRF52LEDMatrix : public Display
       {
           uint8_t strobeRow;                      // The current row being displayed.
           uint8_t timeslots;                      // The total number of timeslots used by the driver (includes light sensing).
           DisplayMode mode;                       // The currnet display mode being used.
           bool enabled;                           // Whether or not the display is enabled.
           uint8_t rotation;                       // DisplayRotation
   
           const MatrixMap     &matrixMap;         // Data structure that maps screen x/y pixels into GPIO pins.
           NRFLowLevelTimer    &timer;             // The timer module used to drive this LEDMatrix.
           uint32_t            timerPeriod;        // The period of the hardware timer.
           uint32_t            quantum;            // The length of time allotted to each brightness level.
           uint32_t            lightLevel;         // Record of the last light level sampled.
           
           int8_t              gpiote[NRF52_LED_MATRIX_MAXIMUM_COLUMNS];            // GPIOTE channels used by output columns.
           int8_t              ppi[NRF52_LED_MATRIX_MAXIMUM_COLUMNS];               // PPI channels used by output columns.
   
           public:
           void render();
   
           NRF52LEDMatrix(NRFLowLevelTimer &displayTimer, const MatrixMap &map, uint16_t id = DEVICE_ID_DISPLAY, DisplayMode mode = DisplayMode::DISPLAY_MODE_BLACK_AND_WHITE);
   
           void setDisplayMode(DisplayMode mode);
   
           DisplayMode getDisplayMode();
   
           void rotateTo(DisplayRotation position);
   
           virtual void enable();
   
           virtual void disable();
   
           void clear();
   
           int setBrightness(int b);
   
           int readLightLevel();
   
           virtual int setSleep(bool doSleep) override;
           
           ~NRF52LEDMatrix();
       };
   }
   
   #endif
