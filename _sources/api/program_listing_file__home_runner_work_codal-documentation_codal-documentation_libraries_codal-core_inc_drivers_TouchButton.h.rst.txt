
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_TouchButton.h:

Program Listing for File TouchButton.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_TouchButton.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/drivers/TouchButton.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef TOUCH_BUTTON_H
   #define TOUCH_BUTTON_H
   
   #include "CodalConfig.h"
   #include "Button.h"
   #include "CodalComponent.h"
   #include "Event.h"
   #include "Pin.h"
   #include "TouchSensor.h"
   
   // Constants associated with TouchButton
   #define TOUCH_BUTTON_CALIBRATION_LINEAR_OFFSET              2           // Constant value added to sensed baseline to determine threshold.
   #define TOUCH_BUTTON_CALIBRATION_PERCENTAGE_OFFSET          5           // Proportion (percentage) of baseline reading added to sensed baseline to determine threshold.
   
   // Configure default TouchButton sensitivity. Defined as a percentage above the current threshold.
   // Samples above this value are classified as ACTIVE.
   #ifndef TOUCH_BUTTON_SENSITIVITY
   #define TOUCH_BUTTON_SENSITIVITY                            10
   #endif
   
   // Configure default TouchButton calibration period. 
   //Defined as number of samples to aggregate.
   #ifndef TOUCH_BUTTON_CALIBRATION_PERIOD
   #define TOUCH_BUTTON_CALIBRATION_PERIOD                     10
   #endif
   
   // Status flags associated with a touch sensor
   #define TOUCH_BUTTON_CALIBRATING            0x10
   
   namespace codal
   {
       class TouchSensor;
   
       class TouchButton : public Button
       {
           public:
   
           TouchSensor     &touchSensor;           // The TouchSensor driving this button
           int             threshold;              // The calibration threshold of this button
           int             reading;                // The last sample taken of this button.
           bool            active;                 // true if this button is currnelty being sensed, false otherwise.
   
   
           TouchButton(Pin &pin, TouchSensor &sensor, int threshold = -1);
   
           void calibrate();
   
           void setThreshold(int threshold);
   
           int getThreshold();
   
           int getValue();
   
           void setValue(int reading);
   
           int buttonActive();
   
            int getPinValue();
   
            void setPinValue(int v);
   
           ~TouchButton();
   
       };
   }
   
   #endif
