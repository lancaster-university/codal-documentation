
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_bluetooth_MicroBitBLEManager.h:

Program Listing for File MicroBitBLEManager.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-microbit-v2_inc_bluetooth_MicroBitBLEManager.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-microbit-v2/inc/bluetooth/MicroBitBLEManager.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2016 British Broadcasting Corporation.
   This software is provided by Lancaster University by arrangement with the BBC.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef MICROBIT_BLE_MANAGER_H
   #define MICROBIT_BLE_MANAGER_H
   
   #include "MicroBitConfig.h"
   
   #if CONFIG_ENABLED(DEVICE_BLE)
   
   #ifndef SOFTDEVICE_PRESENT
   #error "Please define SOFTDEVICE_PRESENT in your configuration"
   #endif
   
   #include "MicroBitBLETypes.h"
   #include "MicroBitStorage.h"
   #include "MicroBitDisplay.h"
   #include "ExternalEvents.h"
   #include "MicroBitButton.h"
   
   #define MICROBIT_BLE_PAIR_REQUEST 0x01
   #define MICROBIT_BLE_PAIR_COMPLETE 0x02
   #define MICROBIT_BLE_PAIR_PASSCODE 0x04
   #define MICROBIT_BLE_PAIR_SUCCESSFUL 0x08
   
   #define MICROBIT_BLE_PAIRING_TIMEOUT 90
   #define MICROBIT_BLE_POWER_LEVELS 8
   #define MICROBIT_BLE_MAXIMUM_BONDS 4
   #define MICROBIT_BLE_ENABLE_BONDING true
   
   #define MICROBIT_BLE_EDDYSTONE_ADV_INTERVAL     400
   #define MICROBIT_BLE_EDDYSTONE_DEFAULT_POWER    0xF0
   
   // CodalComponent status flags
   #define MICROBIT_BLE_STATUS_DISCONNECT          0x04
   #define MICROBIT_BLE_STATUS_SHUTDOWN            0x08
   
   // micro:bit Modes
   // The micro:bit may be in different states: running a user's application or into BLE pairing mode
   // These modes can be representeded using these #defines
   #define MICROBIT_MODE_PAIRING                   0
   #define MICROBIT_MODE_APPLICATION               1
   
   class MicroBitBLEManager;
   typedef MicroBitBLEManager BLEDevice;
   
   class MicroBitBLEManager : public CodalComponent
   {
       public:
       static MicroBitBLEManager *manager;
   
       //an instance of MicroBitStorage used to store sysAttrs from softdevice
       MicroBitStorage *storage;
   
       MicroBitBLEManager(MicroBitStorage &_storage);
   
       MicroBitBLEManager();
       
       static MicroBitBLEManager *getInstance();
   
       void init(ManagedString deviceName, ManagedString serialNumber, EventModel &messageBus, MicroBitStorage &keyValuestorage, bool enableBonding, uint16_t board = 0x9904);
       
       int setTransmitPower(int power);
   
       void pairingMode(MicroBitDisplay &display, Button &authorisationButton);
   
       void advertise();
   
       int getBondCount();
   
       void pairingRequested(ManagedString passKey);
   
       bool pairingComplete( int event);
   
       void idleCallback();
   
       void stopAdvertising();
       
       void onDisconnect();
   
       bool getConnected();
   
   #if CONFIG_ENABLED(MICROBIT_BLE_EDDYSTONE_URL)
       int advertiseEddystoneUrl(const char *url, int8_t calibratedPower = MICROBIT_BLE_EDDYSTONE_DEFAULT_POWER, bool connectable = true, uint16_t interval = MICROBIT_BLE_EDDYSTONE_ADV_INTERVAL);
   
       int advertiseEddystoneUrl(ManagedString url, int8_t calibratedPower = MICROBIT_BLE_EDDYSTONE_DEFAULT_POWER, bool connectable = true, uint16_t interval = MICROBIT_BLE_EDDYSTONE_ADV_INTERVAL);
   #endif
   
   #if CONFIG_ENABLED(MICROBIT_BLE_EDDYSTONE_UID)
       int advertiseEddystoneUid(const char* uid_namespace, const char* uid_instance, int8_t calibratedPower = MICROBIT_BLE_EDDYSTONE_DEFAULT_POWER, bool connectable = true, uint16_t interval = MICROBIT_BLE_EDDYSTONE_ADV_INTERVAL);
   #endif
   
      void restartInBLEMode();
   
       uint8_t getCurrentMode();
   
       void setAdvertiseOnDisconnect( bool f) { advertiseOnDisconnect = f; }
       
       bool prepareForShutdown();
   
       virtual int setSleep(bool doSleep) override;
   
       void servicesChanged();
         
     private:
       void showNameHistogram(MicroBitDisplay &display);
   
       void showManagementModeAnimation(MicroBitDisplay &display);
   
       int pairingStatus;
       ManagedString passKey;
       ManagedString gapName;
       
       unsigned long pairingTime;
       unsigned long shutdownTime;
   
       /*
        * Default to Application Mode
        * This variable will be set to MICROBIT_MODE_PAIRING if pairingMode() is executed.
        */
       uint8_t currentMode = MICROBIT_MODE_APPLICATION;
   
       bool advertiseOnDisconnect = true;
   };
   
   #endif
   
   #endif
