
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_LevelDetectorSPL.h:

Program Listing for File LevelDetectorSPL.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_streams_LevelDetectorSPL.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/streams/LevelDetectorSPL.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #include "CodalConfig.h"
   #include "DataStream.h"
   
   #ifndef LEVEL_DETECTOR_SPL_H
   #define LEVEL_DETECTOR_SPL_H
   
   #define LEVEL_DETECTOR_SPL_INITIALISED                       0x01
   #define LEVEL_DETECTOR_SPL_HIGH_THRESHOLD_PASSED             0x02
   #define LEVEL_DETECTOR_SPL_LOW_THRESHOLD_PASSED              0x04
   
   #define LEVEL_DETECTOR_SPL_DEFAULT_WINDOW_SIZE              128
   
   #ifndef LEVEL_DETECTOR_SPL_NORMALIZE
   #define LEVEL_DETECTOR_SPL_NORMALIZE    1
   #endif
   
   // The level (in dB) that corresponds to an 8bit value of 0.
   #ifndef LEVEL_DETECTOR_SPL_8BIT_000_POINT
   #define LEVEL_DETECTOR_SPL_8BIT_000_POINT                   35.0f
   #endif
   
   // The level (in dB) that corresponds to an 8bit value of 255.
   #ifndef LEVEL_DETECTOR_SPL_8BIT_255_POINT
   #define LEVEL_DETECTOR_SPL_8BIT_255_POINT                   100.0f
   #endif
   
   #define LEVEL_DETECTOR_SPL_8BIT_CONVERSION                  (255.0f/(LEVEL_DETECTOR_SPL_8BIT_255_POINT-LEVEL_DETECTOR_SPL_8BIT_000_POINT))
   
   #define LEVEL_DETECTOR_SPL_DB                               1
   #define LEVEL_DETECTOR_SPL_8BIT                             2
   
   
   namespace codal{
       class LevelDetectorSPL : public CodalComponent, public DataSink
       {
       public:
   
           // The stream component that is serving our data
           DataSource      &upstream;          // The component producing data to process
           float           highThreshold;      // threshold at which a HIGH event is generated
           float           lowThreshold;       // threshold at which a LOW event is generated
           int             windowSize;         // The number of samples the make up a level detection window.
           float           level;              // The current, instantaneous level.
           int             sigma;              // Running total of the samples in the current window.
           float           gain;
           float           minValue;
           bool            activated;          // Has this component been connected yet
           bool            enabled;            // Is the component currently running
           int             unit;               // The units to be returned from this level detector (e.g. dB or linear 8bit)
   
           LevelDetectorSPL(DataSource &source, float highThreshold, float lowThreshold, float gain,
               float minValue = 52,
               uint16_t id = DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL,
               bool connectImmediately  = true);
   
           virtual int pullRequest();
   
           /*
            * Determines the instantaneous value of the sensor, in SI units, and returns it.
            *
            * @return The current value of the sensor.
            */
           float getValue();
   
           void disable();
   
           int setLowThreshold(float value);
   
           int setHighThreshold(float value);
   
           float getLowThreshold();
   
           float getHighThreshold();
   
           int setWindowSize(int size);
   
           int setGain(float gain);
   
            int setUnit(int unit);
   
           ~LevelDetectorSPL();
   
           private:
           float splToUnit(float f);
           float unitToSpl(float f);
       };
   }
   
   #endif
