
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Serial.h:

Program Listing for File Serial.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_driver-models_Serial.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/driver-models/Serial.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_SERIAL_H
   #define CODAL_SERIAL_H
   
   #include "ManagedString.h"
   #include "CodalComponent.h"
   #include "Pin.h"
   
   #define CODAL_SERIAL_DEFAULT_BAUD_RATE    115200
   #define CODAL_SERIAL_DEFAULT_BUFFER_SIZE  20
   
   #define CODAL_SERIAL_EVT_DELIM_MATCH      1
   #define CODAL_SERIAL_EVT_HEAD_MATCH       2
   #define CODAL_SERIAL_EVT_RX_FULL          3
   #define CODAL_SERIAL_EVT_DATA_RECEIVED    4
   
   #define CODAL_SERIAL_STATUS_RX_IN_USE            0x01
   #define CODAL_SERIAL_STATUS_TX_IN_USE            0x02
   #define CODAL_SERIAL_STATUS_RX_BUFF_INIT         0x04
   #define CODAL_SERIAL_STATUS_TX_BUFF_INIT         0x08
   #define CODAL_SERIAL_STATUS_RXD                  0x10
   #define CODAL_SERIAL_STATUS_DEEPSLEEP            0x20
   
   
   namespace codal
   {
       enum SerialMode
       {
           ASYNC,
           SYNC_SPINWAIT,
           SYNC_SLEEP
       };
   
       enum SerialInterruptType
       {
           RxInterrupt = 0,
           TxInterrupt
       };
   
       class Serial : public PinPeripheral, public CodalComponent
       {
           protected:
   
           Pin* tx;
           Pin* rx;
   
           //delimeters used for matching on receive.
           ManagedString delimeters;
   
           //a variable used when a user calls the eventAfter() method.
           int rxBuffHeadMatch;
   
           uint8_t *rxBuff;
           uint8_t rxBuffSize;
           volatile uint16_t rxBuffHead;
           uint16_t rxBuffTail;
   
           uint8_t *txBuff;
           uint8_t txBuffSize;
           uint16_t txBuffHead;
           volatile uint16_t txBuffTail;
   
           uint32_t baudrate;
   
           virtual int enableInterrupt(SerialInterruptType t) = 0;
           virtual int disableInterrupt(SerialInterruptType t) = 0;
           virtual int setBaudrate(uint32_t baudrate) = 0;
           virtual int configurePins(Pin& tx, Pin& rx) = 0;
   
           int initialiseRx();
   
           int initialiseTx();
   
           void circularCopy(uint8_t *circularBuff, uint8_t circularBuffSize, uint8_t *linearBuff, uint16_t tailPosition, uint16_t headPosition);
   
           int setTxInterrupt(uint8_t *string, int len, SerialMode mode);
   
           public:
   
           void dataTransmitted();
           void dataReceived(char c);
   
           virtual void idleCallback() override;
   
           virtual int putc(char c) = 0;
           virtual int getc() = 0;
   
           Serial(Pin& tx, Pin& rx, uint8_t rxBufferSize = CODAL_SERIAL_DEFAULT_BUFFER_SIZE, uint8_t txBufferSize = CODAL_SERIAL_DEFAULT_BUFFER_SIZE, uint16_t id  = DEVICE_ID_SERIAL);
   
           int sendChar(char c, SerialMode mode = DEVICE_DEFAULT_SERIAL_MODE);
   
           int send(ManagedString s, SerialMode mode = DEVICE_DEFAULT_SERIAL_MODE);
   
           int send(uint8_t *buffer, int bufferLen, SerialMode mode = DEVICE_DEFAULT_SERIAL_MODE);
   
           int read(SerialMode mode = DEVICE_DEFAULT_SERIAL_MODE);
   
   #if CONFIG_ENABLED(CODAL_PROVIDE_PRINTF)
           virtual void printf(const char* format, ...);
   #endif
   
           int getChar(SerialMode mode);
   
           ManagedString read(int size, SerialMode mode = DEVICE_DEFAULT_SERIAL_MODE);
   
           int read(uint8_t *buffer, int bufferLen, SerialMode mode = DEVICE_DEFAULT_SERIAL_MODE);
   
           virtual ManagedString readUntil(ManagedString delimeters, SerialMode mode = DEVICE_DEFAULT_SERIAL_MODE);
   
           int setBaud(int baudrate);
   
           int redirect(Pin& tx, Pin& rx);
   
           int eventAfter(int len, SerialMode mode = ASYNC);
   
           int eventOn(ManagedString delimeters, SerialMode mode = ASYNC);
   
           int isReadable();
   
           int isWriteable();
   
           int setRxBufferSize(uint8_t size);
   
           int setTxBufferSize(uint8_t size);
   
           int getRxBufferSize();
   
           int getTxBufferSize();
   
           int clearRxBuffer();
   
           int clearTxBuffer();
   
           int rxBufferedSize();
   
           int txBufferedSize();
   
           int rxInUse();
   
           int txInUse();
   
           void lockRx();
   
           void lockTx();
   
           void unlockRx();
   
           void unlockTx();
   
           ~Serial();
           
         private:
           void writeNum(uint32_t n, bool full);
       };
   }
   
   #endif
