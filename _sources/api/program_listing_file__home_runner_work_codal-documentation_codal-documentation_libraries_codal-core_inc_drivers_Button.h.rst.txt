
.. _program_listing_file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_Button.h:

Program Listing for File Button.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_codal-documentation_codal-documentation_libraries_codal-core_inc_drivers_Button.h>` (``/home/runner/work/codal-documentation/codal-documentation/libraries/codal-core/inc/drivers/Button.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
   The MIT License (MIT)
   
   Copyright (c) 2017 Lancaster University.
   
   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:
   
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
   
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
   */
   
   #ifndef CODAL_BUTTON_H
   #define CODAL_BUTTON_H
   
   #include "AbstractButton.h"
   #include "CodalConfig.h"
   #include "CodalComponent.h"
   #include "Event.h"
   #include "Pin.h"
   
   namespace codal
   {
       class Button : public AbstractButton, public PinPeripheral
       {
           unsigned long downStartTime;                            // used to store the current system clock when a button down event occurs
           uint8_t sigma;                                          // integration of samples over time. We use this for debouncing, and noise tolerance for touch sensing
           ButtonEventConfiguration eventConfiguration;      // Do we want to generate high level event (clicks), or defer this to another service.
           ButtonPolarity polarity;                          // Determines if the button is active HIGH or LOW.
   
           public:
           Pin &_pin;                                        // The pin this button is connected to.
   
           Button(Pin &pin, uint16_t id, ButtonEventConfiguration eventConfiguration = DEVICE_BUTTON_ALL_EVENTS, ButtonPolarity polarity = ACTIVE_LOW, PullMode mode = PullMode::None);
   
           virtual int isPressed();
   
           void setEventConfiguration(ButtonEventConfiguration config);
   
           void periodicCallback();
   
           void wakeOnActive(int wake)
           {
               _pin.wakeOnActive( wake);
           }
   
           int isWakeOnActive()
           {
               return _pin.isWakeOnActive();
           }
   
           virtual int releasePin(Pin &pin) override;
   
           ~Button();
   
           protected:
           virtual int buttonActive();
   
           virtual int setSleep(bool doSleep) override;
   
       };
   }
   
   #endif
